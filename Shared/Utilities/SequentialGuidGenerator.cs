using System;
using System.Collections.Generic;
using System.Security.Cryptography;
using System.Text;

namespace MiniLink.Shared.Utilities
{
    /// <summary>
    /// This code was borrowed from a comb generator when researching online  see https://github.com/jhtodd/SequentialGuid
    /// This comb however did not guarantee being fully sequential and relied on randompart due to the timestamp resolution being 4ms
    /// Added a custom timestamp provided that allowed us to ensure that the ids are generated 4ms apart.
    /// </summary>
    public static class SequentialGuidGenerator
    {
        #region Static Fields
        /// <summary>
        /// Provides cryptographically strong random sequential data for GUID creation.
        /// </summary>
        private static readonly RNGCryptoServiceProvider RandomGenerator = new RNGCryptoServiceProvider();
        private static readonly UtcNoRepeatTimestampProvider timestampProvider = new UtcNoRepeatTimestampProvider();
        #endregion

        /// <summary>
        /// Returns a new GUID value which is sequentially ordered when formatted as
        /// a string, a byte array, or ordered by the least significant six bytes of the
        /// Data4 block, as specified by <paramref name="guidType" />.
        /// </summary>
        /// <param name="guidType">
        /// Specifies the type of sequential GUID (i.e. whether sequential as a string,
        /// as a byte array, or according to the Data4 block.  This can affect
        /// performance under various database types; see below.
        /// </param>
        /// <returns>
        /// A <see cref="Guid" /> structure whose value is created by replacing
        /// certain randomly-generated bytes with a sequential timestamp.
        /// </returns>
      
        public static Guid Create(SequentialGuidType guidType)
        {
            // We start with 16 bytes of cryptographically strong random data.
            byte[] randomBytes = new byte[10];
            SequentialGuidGenerator.RandomGenerator.GetBytes(randomBytes);

           
            long timestamp = timestampProvider.GetTimestamp().Ticks / 10000L;

            // Then get the bytes
            byte[] timestampBytes = BitConverter.GetBytes(timestamp);

            // Since we're converting from an Int64, we have to reverse on
            // little-endian systems.
            if (BitConverter.IsLittleEndian)
            {
                Array.Reverse(timestampBytes);
            }

            byte[] guidBytes = new byte[16];

            switch (guidType)
            {
                case SequentialGuidType.SequentialAsString:
                case SequentialGuidType.SequentialAsBinary:

                    // For string and byte-array version, we copy the timestamp first, followed
                    // by the random data.
                    Buffer.BlockCopy(timestampBytes, 2, guidBytes, 0, 6);
                    Buffer.BlockCopy(randomBytes, 0, guidBytes, 6, 10);

                    // If formatting as a string, we have to compensate for the fact
                    // that .NET regards the Data1 and Data2 block as an Int32 and an Int16,
                    // respectively.  That means that it switches the order on little-endian
                    // systems.  So again, we have to reverse.
                    if (guidType == SequentialGuidType.SequentialAsString && BitConverter.IsLittleEndian)
                    {
                        Array.Reverse(guidBytes, 0, 4);
                        Array.Reverse(guidBytes, 4, 2);
                    }

                    break;

                case SequentialGuidType.SequentialAtEnd:

                    // For sequential-at-the-end versions, we copy the random data first,
                    // followed by the timestamp.
                    Buffer.BlockCopy(randomBytes, 0, guidBytes, 0, 10);
                    Buffer.BlockCopy(timestampBytes, 2, guidBytes, 10, 6);
                    break;
            }

            return new Guid(guidBytes);
        }
    }

    /// <summary>
    /// Describes the type of a sequential GUID value.
    /// </summary>
    public enum SequentialGuidType
    {
        /// <summary>
        /// The GUID should be sequential when formatted using the
        /// <see cref="Guid.ToString()" /> method.
        /// </summary>
        SequentialAsString,

        /// <summary>
        /// The GUID should be sequential when formatted using the
        /// <see cref="Guid.ToByteArray" /> method.
        /// </summary>
        SequentialAsBinary,

        /// <summary>
        /// The sequential portion of the GUID should be located at the end
        /// of the Data4 block.
        /// </summary>
        SequentialAtEnd
    }

    /// <summary>
    /// Custome Time stamp provider which ensures guid are atleat 4ms apart to ensure them being sequential
    /// Can modify the increment ms field to allow faster creation
    /// </summary>
    public class UtcNoRepeatTimestampProvider
    {

        private DateTime lastValue = DateTime.MinValue;
        private object locker = new object();

        // By default, increment any subsequent requests by 4ms, which overcomes the resolution of 1/300s of our date time. and ensures our id's are sequential.

        public double IncrementMs { get; set; } = 4;

        public DateTime GetTimestamp()
        {
            var now = DateTime.UtcNow;
            lock (locker)
            {
                // Ensure the time difference between the last value and this one is at least the increment threshold
                if ((now - lastValue).TotalMilliseconds < IncrementMs)
                {
                    // now is too close to the last value, use the value with minimum distance from lastValue
                    now = lastValue.AddMilliseconds(IncrementMs);
                }
                lastValue = now;
            }
            return now;
        }
    }
}

