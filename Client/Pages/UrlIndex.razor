@using MiniLink.Shared
@using MiniLink.Shared.Pagination
@inject HttpClient Http


<h3>Urls</h3>


@if (paginatedModel is null)
{
    <LoadingSpinner></LoadingSpinner>
}
else
{
    <EditForm Model="filterModel" OnSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="input-group">
            
            <InputText @bind-Value="filterModel.SearchString" class="form-control" />
            
            <div class="input-group-append">
                <button class="btn btn-primary" type="submit"> <span class="oi oi-magnifying-glass" aria-hidden="true"></span></button>
            </div>
        </div>
    </EditForm>
    <div class="btn-group my-2">
        <button class="btn btn-primary" disabled="@(!paginatedModel.HasPreviousPage)" @onclick="@HandlePrevSubmit">Prev</button>

        <button class="btn btn-primary" disabled="@(!paginatedModel.HasNextPage)" @onclick="@HandleNextSubmit">Next</button>

    </div>
    <span>Showing page <b>@paginatedModel.PageIndex</b> of <b> @paginatedModel.TotalPages</b></span>

    <table class="table table-striped table-fixed">
        <thead>
            <tr>
                <th>Shortened Url</th>
                <th>URL</th>
                <th>Visits</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var link in paginatedModel.Items)
            {
                <tr>
                    <td class="text-break"><a href="@link.ShortenedUrl">@link.ShortenedUrl</a></td>
                    <td class="text-break"><a href="@link.URL">@link.URL</a></td>
                    <td>@link.VisitCount</td>
                    <td><button @onclick="@(async ()=> await RefreshCount(link))" class="btn btn-success"> <span class="oi oi-reload" aria-hidden="true"></span></button></td>
                </tr>
            }
        </tbody>
    </table>
}


@code {

    // A lot of this could be further reduced into smaller components but should suffice for this demo

    private PaginatedModel<LinkWithCountDTO> paginatedModel;

    private FilterModel filterModel = new FilterModel();

  

    protected override async Task OnInitializedAsync()
    {

        var query = GenerateQueryString(filterModel.PageIndex, filterModel.SearchString, filterModel.SortOrder);


        paginatedModel = await Http.GetFromJsonAsync<PaginatedModel<LinkWithCountDTO>>("Link?" + query);
    }

    private async Task HandleValidSubmit()
    {
        var query = GenerateQueryString(filterModel.PageIndex, filterModel.SearchString, filterModel.SortOrder);


        paginatedModel = await Http.GetFromJsonAsync<PaginatedModel<LinkWithCountDTO>>("Link?" + query);

        this.StateHasChanged();

    }

    private async Task HandleNextSubmit()
    {
        filterModel.PageIndex += 1;
        var query = GenerateQueryString(filterModel.PageIndex, filterModel.SearchString, filterModel.SortOrder);

        paginatedModel = await Http.GetFromJsonAsync<PaginatedModel<LinkWithCountDTO>>("Link?" + query);

        this.StateHasChanged();

    }

    private async Task HandlePrevSubmit()
    {
        filterModel.PageIndex -= 1;

        var query = GenerateQueryString(filterModel.PageIndex, filterModel.SearchString, filterModel.SortOrder);


        paginatedModel = await Http.GetFromJsonAsync<PaginatedModel<LinkWithCountDTO>>("Link?" + query);

        this.StateHasChanged();

    }

    private async Task RefreshCount(LinkWithCountDTO entry)
    {
        var refreshed = await Http.GetFromJsonAsync<LinkWithCountDTO>($"Link/{entry.Id}");

        var item = paginatedModel.Items.FirstOrDefault(m => m.Id == refreshed.Id);

        item.VisitCount = refreshed.VisitCount;

        this.StateHasChanged();
    }


    private string GenerateQueryString(int pageIndex, string searchString, string sortOrder)
    {
        var query = HttpUtility.ParseQueryString(string.Empty);

        query[nameof(pageIndex)] = pageIndex.ToString();
        query[nameof(searchString)] = searchString;
        query[nameof(sortOrder)] = sortOrder;

        return query.ToString();
    }
}
