@using MiniLink.Shared
@using MiniLink.Shared.Pagination
@inject HttpClient Http


<h3>Urls</h3>


@if (paginatedModel is null)
{
    <LoadingSpinner></LoadingSpinner>
}
else
{
    <EditForm Model="filterModel" OnSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <InputText @bind-Value="filterModel.SearchString" class="form-control" />
        </div>
        <div class="form-group">
            <button class="btn btn-primary" type="submit">Search</button>
        </div>
    </EditForm>

    
        @if (paginatedModel.HasPreviousPage)
        {
            <button class="btn btn-primary" onclick="@HandlePrevSubmit()">Prev</button>
        }
        @if (paginatedModel.HasNextPage)
        {
            <button class="btn btn-primary" onclick="@HandleNextSubmit()" type="submit">Next</button>
        }
      
    <table class="table table-striped table-fixed">
        <thead>
            <tr>
                <th>URL</th>
                <th>Visits</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var link in paginatedModel)
            {
                <tr>
                    <td class="text-break" >@link.URL</td>
                    <td>@link.VisitCount</td>
                    <td><button @onclick="@(async ()=> await RefreshCount(link))" class="btn btn-success">Refresh</button></td>
                </tr>
            }
        </tbody>
    </table>
}


@code {

    // A lot of this could be further reduced into smaller components but should suffice for this demo

    private PaginatedModel<LinkWithCountDTO> paginatedModel;

    private FilterModel filterModel = new FilterModel();

    protected override async Task OnInitializedAsync()
    {

        var query = GenerateQueryString(filterModel.PageIndex, filterModel.SearchString, filterModel.SortOrder);


        paginatedModel = await Http.GetFromJsonAsync<PaginatedModel<LinkWithCountDTO>>("Link?" + query);
    }

    private async Task HandleValidSubmit()
    {
        var query = GenerateQueryString(filterModel.PageIndex, filterModel.SearchString, filterModel.SortOrder);


        paginatedModel = await Http.GetFromJsonAsync<PaginatedModel<LinkWithCountDTO>>("Link?" + query);

        this.StateHasChanged();

    }

    private async Task HandleNextSubmit()
    {
        filterModel.PageIndex += 1;
        var query = GenerateQueryString(filterModel.PageIndex, filterModel.SearchString, filterModel.SortOrder);

        paginatedModel = await Http.GetFromJsonAsync<PaginatedModel<LinkWithCountDTO>>("Link?" + query);

        this.StateHasChanged();

    }

    private async Task HandlePrevSubmit()
    {
        filterModel.PageIndex -= 1;

        var query = GenerateQueryString(filterModel.PageIndex, filterModel.SearchString, filterModel.SortOrder);


        paginatedModel = await Http.GetFromJsonAsync<PaginatedModel<LinkWithCountDTO>>("Link?" + query);

        this.StateHasChanged();

    }

    private async Task RefreshCount(LinkWithCountDTO entry)
    {
        var refreshed =  await Http.GetFromJsonAsync<LinkWithCountDTO>($"Link/{entry.Id}");

        var item =  paginatedModel.Find(m => m.Id == refreshed.Id);

        item.VisitCount = refreshed.VisitCount;

        this.StateHasChanged();
    }


    private string GenerateQueryString(int pageIndex, string searchString, string sortOrder)
    {
        var query = HttpUtility.ParseQueryString(string.Empty);

        query[nameof(pageIndex)] = pageIndex.ToString();
        query[nameof(searchString)] = searchString;
        query[nameof(sortOrder)] = sortOrder;

        return query.ToString();
    }
}
